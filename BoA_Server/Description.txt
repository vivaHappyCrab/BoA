Server:
1.	Принимать команды
2.	Отвечать
3.	Выполнять скрипты
4.	Управлять ходом игры
Основные объекты:
1.	Game
2.	Client
3.	Server
4.	EventHandler
Game Objects:
1.	Map
2.	Player 
3.	Battle
4.	Game properties
Map Object:
1.	Town
2.	Army
3.	Asset
4.	Mine
5.	Other
Battle Objects:
1.	Unit
2.	Obstacle
3.	Hero
4.	Spellbook
5.	Cell
Town Objects:
1.	Building
2.	Resource
3.	Army
4.	Market
5.	Asset
6.	Upgrade
7.	Mine
8.	Hero
9.	Other
Player:
1.	Town
2.	Hero
3.	Army
4.	UpGrades
Hero:
1.	Asset
2.	SkillTree
3.	Attribute
4.	Hero properties
5.	Town
Army:
1.	Hero
//----------------------------------------------------------------------------------------------------------------------------------------
enum TYPE
{
	TYPE_INT = 0,
	TYPE_FLOAT = 1,
	TYPE_STRING = 2,
	TYPE_ID = 3
}
class Value
{
	TYPE getType();
	Value(int value);
	Value(float value);
	Value(string value);
	Value(ID value);
}
class ObjectManager
{
	Object& getNewObject();
	Object& getObjectById(ID id);
};
class Object
{
	ID getId();
	Value& operator [] (string const& key);
};
class Unit : Object
{
	void takesDamage(int amount, Unit& attacker);
	int doesDamage();
	//event handlers
private:
	Object& onDamageTake(ID id, Object& params);
	Object& onDamageDo(ID id, Object& params);
};
class Obstacle : Object
{
	
};
class Cell : Object
{
		
};
class Spell : Object   //Объект-посредник между кастером и самим спеллом(эффектом)
{					   //Здесь хранится его манакост, КД, вызываемый им эффект
	Effect& Casting(Unit& caster, Object& target);
private:
	Object& onBeingCasted(ID id, Object& params);
};
class Effect : Object    //Объект взаимодействующий с целью каста(наносит урон, замедляет, создаёт объект итп)
{
	void StartActions(Object& effected);
	void PeriodicActions(Object& effected);
	void EndActions(Object& effected);
private:
	Object& onBeingStarted(ID id, Object& params);
	Object& onTick(ID id, Object& params);
	Object& onBeingFinished(ID id, Object& params);
};
